###############################################################################
#
# Copyright (c) 2019 - present.  Boling Consulting Solutions (bcsw.net)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
###############################################################################
#
# G.988 Augmented Configuration File
#
#  The OMCI Parser is capable of parsing many Managed Entity attributes without too
#  much external support, but for a complete definition, the following areas of
#  parsing need some manual assistance:
#
#   o Attribute Type The parser can detect the basic type of attribute for most Managed
#                    Entities but a few may need a finer definition. See the 'Types'
#                    discussion below for more information.
#
#   o Default Value  The default value is used by all but read-by-create attributes
#                    to specify a default. For integer related values, this is a
#                    straightforward process. For octet-strings, the Base-64 value
#                    is provided. Note that some items (Vendor ID, Serial Number, ...)
#                    attributes will need to be further specified by the user of this
#                    library in order to specify a better default.
#
#                    For tables, a 'null' (without quotes) specifies an empty table
#                    by default.
#
#    o Constraints   The constraints for write and read-by-create attributes allows the
#                    code generator to produce code that can check whether or not a
#                    value being assigned to a variable is valid. See the 'Constraint'
#                    section below for more information. These constraints are specific
#                    keywords/values that are type specific. A code generator has the
#                    responsibility for generating the constraint checker code that is
#                    appropriate for the giving programming language
#
#  This file can be specified during the second stage of parsing such that the final
#  fully parsed JSON (used by the code generator) is more complete.
#
#  Types:
#    Default Types:  These are assigned by the initial parser:
#      Octets           A series of zero or more 8-bit values that are not an integral 1, 2,
#                       4, or 8 bytes in length
#      UnsignedInteger  8-, 16-, 32-, and 64-bit unsigned values
#      Table            A table row (of Octets)
#
#    Custom Types:  These are specified in the metadata section below as appropriate:
#      String         Readable String
#      SignedInteger  Signed integer, often expressed as 2's complement
#      Pointer        Pointer to an instance of another Managed Entity
#      BitField       Bit field
#      Enumeration    Fixed number of values (Unsigned Integers)
#
#  Constraints:
#    If an attribute has a blank/missing constraint, all values are valid. For ONU read-only
#    values (registers, status, counter, computed, ...) there are no constraints since the ONU
#    sets these as needed.
#
#    Default Types:  Constraint definitions for default types are provided
#      Octets           len(<values>)[,regex(<allowed-pattern>)][,fill(<value>)]
#      UnsignedInteger  <values>
#      Table            - see Octets above -
#
#    Custom Types:   These are specified in the metadata section below as appropriate:
#      String          len(<values>)[,regex(<allowed-pattern>)][,fill(<value>)]
#      SignedInteger   <values>
#      Pointer         <16-bit values>
#      BitField        <bitmask>
#      Enumeration     <values>
#
#    where:
#
#     len()    is a function that checks a string/octets for a specific length and the
#              result should match one of the <values>.  For tables, this is the length
#              of a row entry
#
#     regex()  is an optional regular expression that will check the values of
#              the collection of octets.
#
#     fill())  is an optional fill value to add to the end of a supplied string so that
#              the entire string length is set to the maximum allowed. Typically this is
#              either an ASCII space (0x20) or a null (0x00).
#
#     <values> is a pattern of one or more numbers as indicated below.
#              <value>                   a single numerical value
#              <min-value>..<max-value>  a range of values with the min/max spexified
#
#              Multiple value fields can be specified and are separated by commas
#              such as:      2, 4..16, 255
#
#     <bitmask>  is a numerical (often hexadecimal) value that specifies the valid bits
#                allowed for the bitmask
#
###############################################################################
# The Managed Entity data (arranged by Class ID)
#
managed_entities:
- class_id: 2
  name: ONU data
  attributes:
  - index: 0
    name: Managed Entity Id
    type: Pointer
    default: 0
    constraint: 0
  - index: 1
    name: Mib Data Sync
    type: UnsignedInteger
    default: 0
    constraint: 0..0xFF
