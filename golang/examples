# Placeholder for jinja snippets


{% import 'macros.jinja' as Macros with context -%}
{{copyright}}
{{generator_warning}}
package {{package_name}}
{# blank line #}
import (
	"../../omci"
)
{# blank line #}
type {{ classID.name|camelcase }} struct {
	BaseManagedEntity
}

func New{{ classID.name|camelcase }}(params ...ParamData) (IManagedEntity, error) {
	eid := decodeEntityID(params...)
	entity := BaseManagedEntity{
		name:     "{{ classID.name|camelcase }}",
		classID:  {{ classID.cid }},
		entityID: eid,
		msgTypes: []omci.MsgType{
			{%-if classID.actions|length %}{{Macros.generate_msgTypes(classID.actions)}}{%endif%}
			{%-if classID.optional_actions|length %}{{Macros.generate_msgTypes(classID.optional_actions)}}{%endif%}
		},
		attributeList: []omci.IAttribute{
			{%-if classID.attributes|length %}{{Macros.generate_attributes(classID.attributes)}}{%endif%}
		},
	}
	entity.computeAttributeMask()
	return &{{ classID.name|camelcase }}{entity}, nil
}
{# blank line #}




{%-macro generate_msgTypes(msgTypes)-%}
    {%-for type in msgTypes%}
			omci.{{ type.name }},
    {%-endfor-%}
{%-endmacro-%}

{%- macro generate_attributes2(attributes)-%}
    {%-for attr in attributes%}
			{% call attribute_field({{attr.size}}) %}
			("{{attr.name|camelcase}}", 0, omci.Read|omci.Write,
			{% endcall %}
    {%-endfor-%}
{%-endmacro-%}

{%- macro generate_attributes(attributes)-%}
    {%-for attr in attributes%}
    {%- if {{size.octets}} == 1 -%}
omci.NewByteField
    {%- elif {{size.octets}} == 2 -%}
omci.NewUint16Field
    {%- elif {{size.octets}} == 4 -%}
omci.NewUint32Field
    {%- elif {{size.octets}} == 8 -%}
omci.NewUint64Field
    {%- else -%}
omci.NewUnknownField
    {%- endif -%}
			("{{attr.name|camelcase}}", 0, omci.Read|omci.Write,
    {%-endfor-%}
{%-endmacro-%}



{%- macro attribute_field size -%}
    {%- if {{size.octets}} == 1 -%}
omci.NewByteField
    {%- elif {{size.octets}} == 2 -%}
omci.NewUint16Field
    {%- elif {{size.octets}} == 4 -%}
omci.NewUint32Field
    {%- elif {{size.octets}} == 8 -%}
omci.NewUint64Field
    {%- else -%}
omci.NewUnknownField
    {%- endif -%}
{%- endmacro -%}

//
//func LoadManagedEntityDefinition(classID uint16, entityID uint16) (IManagedEntity, error) {
//	//var newMe IManagedEntity
//	//var err error
//
//	// TODO: Need to implement as a lookup map (code-generated)
//	switch classID {
//	default:
//		// TODO: Support concept of a 'blob-ME' to wrap unknown MEs. Optional?
//		return nil, errors.New("unsupported Managed Entity class")
//
//	case 0x0002:
//		return NewOnuData()
//
//	//case 0x0110:
//	//	return NewGalEthernetProfile(entityID)
//	}
//}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
// Example MEs.  Oothers will eventually be 'mostly' auto-generated by the OMCI parser.
// Doing a few by hand to see what functions and properties we need
//func decodeEntityID(params ...gen.ParamData) uint16 {
//	if len(params) > 0 {
//		return params[0].EntityID
//	}
//	return 0
//}
//
//type OnuData struct {
//	BaseManagedEntity
//}
//
//func NewOnuData(params ...gen.ParamData) (IManagedEntity, error) {
//	eid := decodeEntityID(params...)
//	if eid != 0 {
//		return nil, errors.New("invalid entity ID for ONU Data")
//	}
//	entity := BaseManagedEntity{
//		name:     "OnuData",
//		classID:  2,
//		entityID: eid,
//		msgTypes: []MsgType{Get, Set, GetAllAlarms, GetAllAlarmsNext, MibReset, MibUpload, MibUploadNext},
//		attributeList: []IAttribute{
//			NewUint16Field("MIBDataSync", 0, Read|Write)},
//	}
//	entity.computeAttributeMask()
//	return &OnuData{entity}, nil
//}
//
//func NewOnuData(entityID ...uint16) (*OnuData, error) {
//	// TODO: Code generated constraints would be helpful
//	eid := decodeEntityID(entityID...)
//	if eid != 0 {
//		return nil, errors.New("invalid entity ID for ONU Data")
//	}
//	entity := BaseManagedEntity{
//		name:     "OnuData",
//		classID:  2,
//		entityID: eid,
//		msgTypes: []MsgType{Get, Set, GetAllAlarms, GetAllAlarmsNext, MibReset, MibUpload, MibUploadNext},
//		attributeList: []IAttribute{
//			NewUint16Field("MIBDataSync", 0, Read|Write)},
//	}
//	entity.computeAttributeMask()
//	return &OnuData{entity}, nil
//}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
//type GalEthernetProfile struct {
//	BaseManagedEntity
//}
//
//func NewGalEthernetProfile(entityID ...uint16) (*GalEthernetProfile, error) {
//	eid := decodeEntityID(entityID...)
//	entity := BaseManagedEntity{
//		name:     "GalEthernetProfile",
//		classID:  0x0110,
//		entityID: eid,
//		msgTypes: []MsgType{Create, Delete, Get, Set},
//		attributeList: []IAttribute{
//			NewUint16Field("MaximumGEMPayloadSize", 0, Read|SetByCreate)},
//	}
//	entity.computeAttributeMask()
//	return &GalEthernetProfile{entity}, nil
//}
