{#-
Copyright (c) 2018 - present.  Boling Consulting Solutions (bcsw.net)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-#}
{{copyright}}
{{generator_warning}}
{# blank line #}
package {{package_name}}
{# blank line #}
// ManagedEntityInfo provides ManagedEntity information
type ManagedEntityInfo struct {
	New func(params ...ParamData) (*ManagedEntity, error)
}
{# blank line #}
// ParamData can be passed to the 'New' function to dictate how the returned
// Managed Entity is created. You should supply either zero or one ParamData
// structure to 'New'.
//
// If No ParamData is passed, the returned Managed Entity can only be used for
// providing validation of other structures. This is commonly done in a packet
// encoder/decoder to assist in that process.
//
// If One ParamData is passed, the returned Managed Entity will be initialized
// with the given values/attributes and then validated. This is commonly done
// when you wish to create an ME for transmission, storage or removal from a
// persistent database, or some other similar purpose.
//
type ParamData struct {
	EntityID   uint16
	Attributes AttributeValueMap
}
{# blank line #}
// CreateME wraps a function that makes it a creator of a Managed Entity
type CreateME func(params ...ParamData) (*ManagedEntity, OmciErrors)
{# blank line #}
var classToManagedEntityMap map[ClassID]CreateME
{# blank line #}
func init() {
	// Create mapping of 16-bit managed entity class IDs to ME-type
	classToManagedEntityMap = make(map[ClassID]CreateME, {{ classIDs|length }})
{% for me in classIDs %}
	classToManagedEntityMap[{{ me.cid }}] = New{{ me.name|camelcase }}
{%- endfor %}
}
{# blank line #}
// LoadManagedEntityDefinition returns a function to create a Managed Entity for a specific
// Managed Entity class ID
func LoadManagedEntityDefinition(classID ClassID, params ...ParamData) (*ManagedEntity, OmciErrors) {
	if newFunc, ok := classToManagedEntityMap[classID]; ok {
		return newFunc(params...)
	}
	if IsVendorSpecificClassID(classID) {
		return NewUnknownVendorSpecificME(classID, params...)
	}
	return NewUnknownG988ME(classID, params...)
}

// GetSupportedClassIDs returns an array of Managed Entity Class IDs supported
func GetSupportedClassIDs() []ClassID {
	supported := make([]ClassID, 0, len(classToManagedEntityMap))
	for k := range classToManagedEntityMap {
		supported = append(supported, k)
	}
	return supported
}

// GetAttributesDefinitions returns the attribute definition map for a specific class
func GetAttributesDefinitions(classID ClassID) (AttributeDefinitionMap, OmciErrors) {
	medef, err := LoadManagedEntityDefinition(classID)
	if err.StatusCode() != Success {
		return nil, err
	}
	return medef.GetAttributeDefinitions(), err
}

// IsVendorSpecificClassID returns true if the provided class ID is reserved in ITU-T G.988
// for vendor specific functionality
func IsVendorSpecificClassID(classID ClassID) bool {
	// Values below are from Table 11.2.4-1 of ITU-T G.988 (11/2017)
	return (ClassID(240) <= classID && classID <= ClassID(255)) ||
		(ClassID(350) <= classID && classID <= ClassID(399)) ||
		(ClassID(65280) <= classID && classID <= ClassID(65535))
}
{# blank line #}