{{copyright}}
{{generator_warning}}
package {{package_name}}
{# blank line #}
import (
	"errors"
	"fmt"
	"github.com/google/gopacket"
	"math/bits"
)
{# blank line #}
// ManagedEntityInfo provides ManagedEntity information
type ManagedEntityInfo struct {
	//Interface  IManagedEntity
	New func(params ...ParamData) (IManagedEntity, error)
}
{# blank line #}
// ParamData can be passed to the 'New' function to dictate how the returned
// Managed Entity is created. You should supply either zero or one ParamData
// structure to 'New'.
//
// If No ParamData is passed, the returned Managed Entity can only be used for
// providing validation of other structures. This is commonly done in a packet
// encoder/decoder to assist in that process.
//
// If One ParamData is passed, the returned Managed Entity will be initialized
// with the given values/attributes and then validated. This is commonly done
// when you wish to create an ME for transmission, storage or removal from a
// persistent database, or some other similar purpose.
//
type ParamData struct {
	EntityID   uint16
	Attributes []IAttribute
}
{# blank line #}
func decodeEntityID(params ...ParamData) uint16 {
	if len(params) > 0 {
		return params[0].EntityID
	}
	return 0
}
{# blank line #}
// CreateME wraps a function that makes it a creator of a Managed Entity
type CreateME func(params ...ParamData) (IManagedEntity, error)
{# blank line #}
var classToManagedEntityMap map[uint16]CreateME
{# blank line #}
func init() {
	// Create mapping of 16-bit managed entity class IDs to ME-type
	classToManagedEntityMap = make(map[uint16]CreateME, {{ classIDs|length }})
{% for me in classIDs %}
	classToManagedEntityMap[{{ me.cid }}] = New{{ me.name|camelcase }}
{%- endfor %}
}
{# blank line #}
func LoadManagedEntityDefinition(classID uint16, params ...ParamData) (IManagedEntity, error) {
	definition, ok := classToManagedEntityMap[classID]; if ok {
		return definition, nil
	}
	return nil, errors.New("managed entity definition not found")
}
