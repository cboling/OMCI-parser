{% import 'macros.jinja' as Macros with context -%}
{{copyright}}
{{generator_warning}}
package {{package_name}}
{# blank line #}
import (
	"encoding/binary"
	"errors"
	"fmt"
)

// Attribute represents a single specific Managed Entity attribute
type IAttribute interface {
	// Name is the attribute name
	Name() string
	Size() int
	Default() interface{}
	Access() AttributeAccess
	Value() (interface{}, error)
}

// Attribute represents a single specific Managed Entity attribute
type Attribute struct {
	name       string
	defValue   interface{}
	size       int
	access     AttributeAccess
	value      interface{}
	constraint func(interface{}) error
	avc        bool // If true, an AVC notification can occur for the attribute
	tca        bool // If true, a threshold crossing alert alarm notification can occur for the attribute
	counter    bool // If true, this attribute is a PM counter
	optional   bool // If true, attribute is option, else mandatory
	deprecated bool //  If true, this attribute is deprecated and only 'read' operations (if-any) performed
}

func (attr *Attribute) String() string {
	return fmt.Sprintf("%v: Size: %v, Default: %v, Access: %v",
		attr.Name(), attr.Size(), attr.Default(), attr.Access())
}
func (attr *Attribute) Name() string            { return attr.name }
func (attr *Attribute) Default() interface{}    { return attr.defValue }
func (attr *Attribute) Size() int               { return attr.size }
func (attr *Attribute) Access() AttributeAccess { return attr.access }
func (attr *Attribute) Value() (interface{}, error) {
	// TODO: Better way to detect not-initialized and no default available?
	return attr.value, nil
}

///////////////////////////////////////////////////////////////////////
//
type ByteField struct {
	Attribute
}

func NewByteField(name string, defVal uint16, access AttributeAccess) *ByteField {
	return &ByteField{
		Attribute: Attribute{name: name, defValue: defVal, size: 1, access: access},
	}
}

type Uint16Field struct {
	Attribute
}

func NewUint16Field(name string, defVal uint16, access AttributeAccess) *Uint16Field {
	return &Uint16Field{
		Attribute: Attribute{name: name, defValue: defVal, size: 2, access: access},
	}
}

type Uint32Field struct {
	Attribute
}

func NewUint32Field(name string, defVal uint16, access AttributeAccess) *Uint32Field {
	return &Uint32Field{
		Attribute: Attribute{name: name, defValue: defVal, size: 4, access: access},
	}
}

type Uint64Field struct {
	Attribute
}

func NewSUint64Field(name string, defVal uint16, access AttributeAccess) *Uint64Field {
	return &Uint64Field{
		Attribute: Attribute{name: name, defValue: defVal, size: 8, access: access},
	}
}

// TODO: UnknownField is just a placeholder to catch unhandled Attribute sizes/structs
type UnknownField struct {
	Attribute
}

func NewUnknownField(name string, defVal uint16, access AttributeAccess) *UnknownField {
	return &UnknownField{
		Attribute: Attribute{name: name, defValue: defVal, size: 99999999, access: access},
	}
}
