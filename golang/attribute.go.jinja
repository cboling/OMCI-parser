{% import 'macros.jinja' as Macros with context -%}
{{copyright}}
{{generator_warning}}
package {{package_name}}
{# blank line #}
import (
	"encoding/binary"
	"errors"
	"fmt"
	"github.com/google/gopacket"
)

// IAttributeDefinition defines a single specific Managed Entity attribute
type IAttributeDefinition interface {
	GetName() string
	GetSize() int
	GetDefault() interface{}
	GetAccess() AttributeAccess
	GetConstraints() func(interface{}) error
	GetValue() (interface{}, error)

	Decode([]byte, gopacket.DecodeFeedback) (interface{}, error)
	SerializeTo(gopacket.SerializeBuffer) error
}

// AttributeDefinition defines a single specific Managed Entity attribute
type AttributeDefinition struct {
	Name       string
	DefValue   interface{}
	Size       int
	Access     AttributeAccess
	Value      interface{}
	Constraint func(interface{}) error
	Avc        bool // If true, an AVC notification can occur for the attribute
	Tca        bool // If true, a threshold crossing alert alarm notification can occur for the attribute
	Counter    bool // If true, this attribute is a PM counter
	Optional   bool // If true, attribute is option, else mandatory
	Deprecated bool //  If true, this attribute is deprecated and only 'read' operations (if-any) performed
}

func (attr *AttributeDefinition) String() string {
	return fmt.Sprintf("Definition: %v: Size: %v, Default: %v, Access: %v",
		attr.GetName(), attr.GetSize(), attr.GetDefault(), attr.GetAccess())
}
func (attr *AttributeDefinition) GetName() string             { return attr.Name }
func (attr *AttributeDefinition) GetDefault() interface{}     { return attr.DefValue }
func (attr *AttributeDefinition) GetSize() int                { return attr.Size }
func (attr *AttributeDefinition) GetAccess() AttributeAccess  { return attr.Access }
func (attr *AttributeDefinition) GetConstraints() func(interface{}) error {
	return attr.Constraint
}

func (attr *AttributeDefinition) GetValue() (interface{}, error) {
	// TODO: Better way to detect not-initialized and no default available?
	return attr.Value, nil
}

func (attr *AttributeDefinition) Decode(data []byte, df gopacket.DecodeFeedback) (interface{}, error) {
	// Use negative numbers to indicate signed values
	size := attr.GetSize()
	if size < 0 {
		size = -size
	}
	if len(data) < size {
		df.SetTruncated()
		return nil, errors.New("packet too small for field")
	}
	var err error
	switch attr.GetSize() {
	default:
		return nil, errors.New("unknown attribute size")
	case 1:
		value := data[0]
		if attr.GetConstraints() != nil {
			err = attr.GetConstraints()(value)
			if err != nil {
				return nil, err
			}
		}
		return value, err
	case 2:
		value := binary.BigEndian.Uint16(data[0:2])
		if attr.GetConstraints() != nil {
			err = attr.GetConstraints()(attr.Value)
			if err != nil {
				return nil, err
			}
		}
		return value, err
	case 4:
		value := binary.BigEndian.Uint32(data[0:4])
		if attr.GetConstraints() != nil {
			err = attr.GetConstraints()(attr.Value)
			if err != nil {
				return nil, err
			}
		}
		return value, err
	case 8:
		value := binary.BigEndian.Uint64(data[0:8])
		if attr.GetConstraints() != nil {
			err = attr.GetConstraints()(attr.Value)
			if err != nil {
				return nil, err
			}
		}
		return value, err
	}
}

func (attr *AttributeDefinition) SerializeTo(b gopacket.SerializeBuffer) error {
	// TODO: Check to see if space in buffer here !!!!
	bytes, err := b.AppendBytes(attr.GetSize())
	if err != nil {
		return err
	}
	switch attr.GetSize() {
	default:
		return errors.New("unknown attribute size")
	case 1:
		bytes[0] = attr.Value.(byte)
	case 2:
		binary.BigEndian.PutUint16(bytes, attr.Value.(uint16))
	case 4:
		binary.BigEndian.PutUint32(bytes, attr.Value.(uint32))
	case 8:
		binary.BigEndian.PutUint64(bytes, attr.Value.(uint64))
	}
	return nil
}

///////////////////////////////////////////////////////////////////////
// Packet definitions for attributes of various types/sizes

func ByteField(name string, defVal uint16, access AttributeAccess) *AttributeDefinition {
	return &AttributeDefinition{Name: name, DefValue: defVal, Size: 1, Access: access}
}

func Uint16Field(name string, defVal uint16, access AttributeAccess) *AttributeDefinition {
	return &AttributeDefinition{Name: name, DefValue: defVal, Size: 2, Access: access}
}

func Uint32Field(name string, defVal uint16, access AttributeAccess) *AttributeDefinition {
	return &AttributeDefinition{Name: name, DefValue: defVal, Size: 4, Access: access}
}

func Uint64Field(name string, defVal uint16, access AttributeAccess) *AttributeDefinition {
	return &AttributeDefinition{Name: name, DefValue: defVal, Size: 8, Access: access}
}

// TODO: Need more fields...
func UnknownField(name string, defVal uint16, access AttributeAccess) *AttributeDefinition {
	return &AttributeDefinition{Name: name, DefValue: defVal, Size: 99999999, Access: access}
}

///////////////////////////////////////////////////////////////////////
// Attribute Value

// IAttributeValue implements a single specific Managed Entity attribute instance
// The index for the Entity ID (always the first) is -1 as it is not provided
// in the attribute mask when transmitted or received on the wire
type IAttributeValue interface {
	GetName() string
	GetIndex() int
	GetValue() (interface{}, error)
	SetValue(interface{}) error
}

type AttributeMap map[int]IAttributeValue
