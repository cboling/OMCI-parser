{% import 'macros.jinja' as Macros with context -%}
{{copyright}}
{{generator_warning}}
package {{package_name}}
{# blank line #}
import (
	"errors"
	"fmt"
	"github.com/deckarep/golang-set"
	"github.com/google/gopacket"
)
{# blank line #}
type ManagedEntity struct {
	definition    *ManagedEntityDefinition
	attributeMask uint16
	attributes    AttributeValueMap
}

// String provides a simple string that describes this struct
func (entity *ManagedEntity) String() string {
	return fmt.Sprintf("ManagedEntity: (%v) %v/%v (%#x/%#x): attributes: %v",
		entity.GetName, entity.GetClassID(), entity.GetEntityID(),
		entity.GetClassID(), entity.GetEntityID(), entity.attributes)
}

func NewManagedEntity(definition *ManagedEntityDefinition, params ...ParamData) (*ManagedEntity, error) {
	entity := &ManagedEntity{
		definition: definition,
		attributes: make(map[string]interface{}),
	}
	err := entity.setAttributes(params...)
	if err != nil {
		entity = nil
	}
	return entity, err
}

func (entity *ManagedEntity) GetManagedEntityDefinition() *ManagedEntityDefinition {
	return entity.definition
}

func (entity *ManagedEntity) GetName() string {
	return entity.definition.GetName()
}

func (entity *ManagedEntity) GetClassID() uint16 {
	return entity.definition.GetClassID()
}

func (entity *ManagedEntity) GetMessageTypes() mapset.Set {
	return entity.definition.GetMessageTypes()
}

func (entity *ManagedEntity) GetAllowedAttributeMask() uint16 {
	return entity.definition.GetAllowedAttributeMask()
}

func (entity *ManagedEntity) GetAttributeDefinitions() *AttributeDefinitionMap {
	return entity.definition.GetAttributeDefinitions()
}

func (entity *ManagedEntity) DecodeAttributes(mask uint16, data []byte, p gopacket.PacketBuilder) (AttributeValueMap, error) {
	return entity.definition.DecodeAttributes(mask, data, p)
}

func (entity *ManagedEntity) SerializeAttributes(attr AttributeValueMap, mask uint16, b gopacket.SerializeBuffer) error {
	return entity.definition.SerializeAttributes(attr, mask, b)
}

func (entity *ManagedEntity) GetEntityID() uint16 {
	if eid, err := entity.GetAttributeByIndex(0); err == nil {
		return eid.(uint16)
	}
	return 0
}

func (entity *ManagedEntity) SetEntityID(eid uint16) error {
	return entity.SetAttributeByIndex(0, eid)
}

func(entity *ManagedEntity) GetAttributeMask() uint16 {
    return entity.attributeMask
}

func (entity *ManagedEntity) GetAttributeValueMap() *AttributeValueMap {
	return &entity.attributes
}

func (entity *ManagedEntity) GetAttribute(name string) (interface{}, error) {
	value, ok := entity.attributes[name]
	if !ok {
		return 0, errors.New(fmt.Sprintf("attribute '%v' not found", name))
	}
	return value, nil
}

func (entity *ManagedEntity) GetAttributeByIndex(index uint) (interface{}, error) {
	if len(entity.attributes) == 0 {
		return nil, errors.New("attributes have already been set")
	}
	if _, ok := entity.definition.AttributeDefinitions[index]; !ok {
		return nil, errors.New(fmt.Sprintf("invalid attribute index: %d, should be 0..%d",
			index, len(entity.definition.AttributeDefinitions)-1))
	}
	return entity.GetAttribute(entity.definition.AttributeDefinitions[index].Name)
}

func (entity *ManagedEntity) setAttributes(params ...ParamData) error {
	if entity.attributes == nil {
		entity.attributes = make(map[string]interface{})
	} else if len(entity.attributes) > 0 {
		return errors.New("attributes have already been set")
	}
	eidName := entity.definition.AttributeDefinitions[0].Name
	if len(params) == 0 {
		entity.attributes[eidName] = 0
		return nil
	}
	entity.attributes[eidName] = params[0].EntityID

	for name, value := range params[0].Attributes {
		if name == eidName {
			continue
		}
		if err := entity.SetAttribute(name, value); err != nil {
			return err
		}
	}
	return nil
}

func (entity *ManagedEntity) SetAttribute(name string, value interface{}) error {
	attrDef, err := GetAttributeDefinitionByName(entity.definition.GetAttributeDefinitions(), name)
	if err != nil {
		return err
	}
	// TODO: check type and any constraints
	entity.attributes[name] = value
	entity.attributeMask |= uint16(1 << (16-attrDef.GetIndex()))
	return nil
}

func (entity *ManagedEntity) SetAttributeByIndex(index uint, value interface{}) error {
	attrDef, ok := entity.definition.AttributeDefinitions[index]
	if !ok {
		return errors.New(fmt.Sprintf("invalid attribute index: %d, should be 0..%d",
			index, len(entity.definition.AttributeDefinitions)-1))
	}
	// TODO: Check type and any constraints
	entity.attributes[attrDef.Name] = value
	entity.attributeMask |= uint16(1 << (16-attrDef.GetIndex()))
	return nil
}

func (entity *ManagedEntity) DeleteAttribute(name string) error {
	attrDef, err := GetAttributeDefinitionByName(entity.definition.GetAttributeDefinitions(), name)
	if err != nil {
		return err
	}
	delete(entity.attributes, name)
	entity.attributeMask &= ^uint16(1 << (16-attrDef.GetIndex()))
	return nil
}

func (entity *ManagedEntity) DeleteAttributeByIndex(index uint) error {
	attrDef, ok := entity.definition.AttributeDefinitions[index]
	if !ok {
		return errors.New(fmt.Sprintf("invalid attribute index: %d, should be 0..%d",
			index, len(entity.definition.AttributeDefinitions)-1))
	}
	delete(entity.attributes, attrDef.Name)
	entity.attributeMask &= ^uint16(1 << (16-attrDef.GetIndex()))
	return nil
}
