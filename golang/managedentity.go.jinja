{% import 'macros.jinja' as Macros with context -%}
{{copyright}}
{{generator_warning}}
package {{package_name}}
{# blank line #}
import "github.com/deckarep/golang-set"
{# blank line #}
const {{classID.name|camelcase}}ClassId ClassID = ClassID({{classID.cid}})
{# blank line #}
var {{classID.name|camelcase|lower}}BME *ManagedEntityDefinition
{# blank line #}
// {{ classID.name|camelcase }} (class ID #{{classID.cid}}) defines the basic
// Managed Entity definition that is further extended by types that support
// packet encode/decode and user create managed entities.
type {{ classID.name|camelcase }} struct {
	ManagedEntityDefinition
	Attributes AttributeValueMap
}
{# blank line #}
func init() {
	{{classID.name|camelcase|lower}}BME = &ManagedEntityDefinition{
		Name:    "{{ classID.name|camelcase }}",
		ClassID: {{ classID.cid }},
		MessageTypes: mapset.NewSetWith(
			{%-if classID.actions|length %}{{Macros.generate_msgTypes(classID.actions)}}{%endif%}
			{%-if classID.optional_actions|length %}{{Macros.generate_msgTypes(classID.optional_actions)}}{%endif%}
		),
		AllowedAttributeMask: {{Macros.attribute_mask(classID)}},
		AttributeDefinitions: AttributeDefinitionMap{
			{%-if classID.attributes|length %}{{Macros.generate_attributes(classID)}}{%endif%}
		},
	}
}
{# blank line #}
// New{{classID.name|camelcase }} (class ID {{classID.cid}} creates the basic
// Managed Entity definition that is used to validate an ME of this type that
// is received from the wire, about to be sent on the wire.
func New{{ classID.name|camelcase }}(params ...ParamData) (*ManagedEntity, error) {
	return NewManagedEntity({{classID.name|camelcase|lower}}BME, params...)
}
{# blank line #}
